<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Engineering</title>
    <link>/index.xml</link>
    <description>Recent content on Software Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Except where otherwise noted, content on this site is licensed under a [Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by-sa/4.0/).</copyright>
    <lastBuildDate>Sun, 04 Dec 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The javascript transpile dialectic part 1</title>
      <link>/2016/12/the-javascript-transpile-dialectic-part-1/</link>
      <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/12/the-javascript-transpile-dialectic-part-1/</guid>
      <description>

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;

&lt;p&gt;Review setup for different transpiler engines. Simple code for transpiler engines&lt;/p&gt;

&lt;h3 id=&#34;target-audience&#34;&gt;Target Audience&lt;/h3&gt;

&lt;p&gt;Developers new to modern javascript frameworks and tooling&lt;/p&gt;

&lt;h3 id=&#34;source-documents&#34;&gt;Source Documents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//docs.gradle.org/current/userguide/gradle_wrapper.html&#34;&gt;gradle wrapper&lt;/a&gt;
&lt;a href=&#34;//github.com/srs/gradle-node-plugin&#34;&gt;gradle-node-plugin&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/cincheo/jsweet&#34;&gt;jsweet transpiler&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//www.typescriptlang.org/&#34;&gt;TypeScript language&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/Microsoft/TypeScript-Handbook/blob/master/pages/declaration%20files/Introduction.md&#34;&gt;TypeScript Declaration File&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//www.typescriptlang.org/docs/handbook/basic-types.html&#34;&gt;TypeScript type &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//www.typescriptlang.org/docs/handbook/namespaces.html&#34;&gt;TypeScript namespace&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//www.ecma-international.org/ecma-262/6.0/&#34;&gt;ECMA-262 6th Edition&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//kangax.github.io/compat-table/es5/&#34;&gt;ECMAScript 5&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Writing high-performance JavaScript is a challenge, many tools and Javascript dialets exist, the nomenculture can be confusing for new developers &lt;a href=&#34;//nodesource.com/blog/npm-is-massive/&#34;&gt;npm is Massive&lt;/a&gt;. This is part 1 of a series where a simple code for three(3) different transpiler engines is laid out and discussed w.r.t definitions.&lt;/p&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;p&gt;See the &lt;a href=&#34;//github.com/nsavageJVM/transpilers-dev/tree/master/jsweet&#34;&gt;Demo app for jsweet&lt;/a&gt;&lt;br /&gt;
The demo code has a number of configuration options see see top level &lt;a href=&#34;https://github.com/nsavageJVM/transpilers-dev&#34;&gt;readme&lt;/a&gt; for general instructions. &lt;a href=&#34;//github.com/nsavageJVM/transpilers-dev/tree/master/jsweet&#34;&gt;Demo app for jsweet&lt;/a&gt; needs node on the path. If you use the &lt;a href=&#34;//docs.gradle.org/current/userguide/gradle_wrapper.html&#34;&gt;gradle wrapper&lt;/a&gt; then you will need to run the wrapper from the top level directory.&lt;/p&gt;

&lt;h4 id=&#34;transpile&#34;&gt;Transpile&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;1 build the java source `./gradlew :jsweet:build`
2 transpile  `./gradlew :jsweet:jsweet`  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;test&#34;&gt;Test&lt;/h4&gt;

&lt;p&gt;1 assemble the artifacts  &lt;code&gt;./gradlew :jsweet:deployStatic&lt;/code&gt;&lt;br /&gt;
   2 open  Test.html  in the jsweet module &lt;code&gt;staging&lt;/code&gt; directory&lt;/p&gt;

&lt;p&gt;&lt;code&gt;deployStatic&lt;/code&gt; creates a staging directory with all the artifacts assembled and a Test.html with the correct relative paths for the bundled transpiled Java Javascript&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;Typescript is a strongly-typed modular language.  JSweet works by leveraging Typescripts type and module system. We can see this if we examine the output for each stage of the transpile pipeline&lt;/p&gt;

&lt;h4 id=&#34;java-package-and-class-declarations&#34;&gt;Java Package and class declarations&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package app.dev.transpile
import ....
  class ConcurrentSpinner { ....
    public static void main(String[] args) { ....
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;typescript-internal-namespace-and-class-declarations&#34;&gt;Typescript internal namespace and class  declarations&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;namespace app.dev.transpile { ...  
  export class ConcurrentSpinner { ...
    public static main(args : string[]) { ...    
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;javascript-function-declarations&#34;&gt;javascript function declarations&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;(function (app) { ...
    var dev;
    (function (dev) { ...
        var transpile;
        (function (transpile) {
            var ConcurrentSpinner = (function () { ...
                function ConcurrentSpinner(spinner) { ...
    
                ConcurrentSpinner.main = function (args) { ....
                    window.onload = function (e) {
                        return new ConcurrentSpinner(document.getElementById(&amp;quot;spinner&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we can see a clean 1 to 1 mapping from the Java to the Typescript, things become slightly less clean from Typescript to Javascript with the javascript constructor function and the main method as a prototype extension. However this is just verbosity and the one to one map is maintained from Java to Javascript.&lt;/p&gt;

&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;

&lt;p&gt;To clarify the relationships in the above code. Java&amp;rsquo;s strong types and packages map to Typescript cleanly. Typescript is a superset of ECMAScript 2015 &lt;a href=&#34;//www.ecma-international.org/ecma-262/6.0/&#34;&gt;ECMA-262 6th Edition&lt;/a&gt;. ECMAScript 2015 defines &lt;a href=&#34;//www.ecma-international.org/ecma-262/6.0/&#34;&gt;modules&lt;/a&gt; and &lt;a href=&#34;//www.ecma-international.org/ecma-262/6.0/#sec-class-definitions&#34;&gt;class&lt;/a&gt;. Typescript was desinged from the begining to transpile to what we today describe as Javascript but in this context we are refering to &lt;a href=&#34;//kangax.github.io/compat-table/es5/&#34;&gt;ECMAScript 5&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;javascript-fatigue&#34;&gt;Javascript Fatigue&lt;/h3&gt;

&lt;p&gt;As software engineers we need to harmonise the relationships between the javascript dialects and tooling for large scale Javascript applications. Java shops can use frameworks like jsweet and tools such as the &lt;a href=&#34;//github.com/srs/gradle-node-plugin&#34;&gt;gradle-node-plugin&lt;/a&gt; to rapidly spin up applications using a large set of the more prominent elemnts found in &lt;a href=&#34;//nodesource.com/blog/npm-is-massive/&#34;&gt;npm is Massive&lt;/a&gt;. Microsoft have a long history of inovation with scripting langauges and Typescript is a bridge between  &lt;a href=&#34;//kangax.github.io/compat-table/es5/&#34;&gt;ECMAScript 5&lt;/a&gt; and the evolution of Javascript. In the next part we will clarify the issues around transpiling of Google closure.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//github.com/nsavageJVM/transpilers-dev/tree/master/jsweet&#34;&gt;Demo app for jsweet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;////github.com/nsavageJVM/transpilers-dev&#34;&gt;Demo app for all series parts&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Issues generating installer with  BitRock InstallBuilder</title>
      <link>/2016/11/issues-generating-installer-with--bitrock-installbuilder/</link>
      <pubDate>Fri, 25 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/issues-generating-installer-with--bitrock-installbuilder/</guid>
      <description>

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;

&lt;p&gt;Simple code to create a linux installer with BitRocks InstallBuilder&lt;/p&gt;

&lt;h3 id=&#34;target-audience&#34;&gt;Target Audience&lt;/h3&gt;

&lt;p&gt;Developers new to BitRocks InstallBuilder and Cross-platform installation Tools&lt;/p&gt;

&lt;h3 id=&#34;source-documents&#34;&gt;Source Documents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//installbuilder.bitrock.com/&#34;&gt;Bitrock Installbuilder&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//installbuilder.bitrock.com/docs/installbuilder-userguide.html&#34;&gt;Bitrock Installbuilder Documentation&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//installbuilder.bitrock.com/java/&#34;&gt;Bitrock Installbuilder Java Runtimes&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//netbeans.org/kb/docs/java/native_pkg.html&#34;&gt;NetBeans Native packaging&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//docs.oracle.com/javafx/2/deployment/self-contained-packaging.htm&#34;&gt;JavaFX Packager &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//docs.gradle.org/current/userguide/gradle_wrapper.html&#34;&gt;gradle wrapper&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Resolve  path issues for the bundled java runtime(jre) for a native installer created by using &lt;a href=&#34;//installbuilder.bitrock.com/&#34;&gt;Bitrocks Installbuilder&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;p&gt;See the &lt;a href=&#34;//github.com/nsavageJVM/demo-installbuilder&#34;&gt;Demo app&lt;/a&gt;&lt;br /&gt;
Using the gradle wrapper build with  &lt;code&gt;./gradlew bootRepackage&lt;/code&gt;  then create the arifacts for Installbuilder with &lt;code&gt;./gradlew deployStaging&lt;/code&gt;&lt;br /&gt;
This creates a staging directory with all the artifacts assembled for Bitrock with the correct relative paths for the bundled java runtime environment. See Fig 1.&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;When developing standalone applications many clients sadly will use windows and not really understand how their box is configured. You can not just give them an uber jar and say &amp;lsquo;run the jar&amp;rsquo; at least not if they are providing the cash incentives. They will reasonably  expect an installer that produces a desktop shortcut that  they can click to run the application.&lt;br /&gt;
&lt;a href=&#34;//installbuilder.bitrock.com/&#34;&gt;Bitrocks Installbuilder&lt;/a&gt;  is a cross-platform installation tool. Its a step up from the other available options (&lt;a href=&#34;//netbeans.org/kb/docs/java/native_pkg.html&#34;&gt;NetBeans Native packaging&lt;/a&gt;, &lt;a href=&#34;//docs.oracle.com/javafx/2/deployment/self-contained-packaging.htm&#34;&gt;JavaFX Packager &lt;/a&gt;) as it has a wide range of target programming languages (not just java) and platforms. InstallBuilder creates native applications with a bundled runtime(Java or other) and it is generally trivial to set it up.&lt;/p&gt;

&lt;p&gt;I ran into an issue with the &lt;a href=&#34;//installbuilder.bitrock.com/docs/installbuilder-userguide.html&#34;&gt;Documentation&lt;/a&gt; for delivering a java application with  no external dependencies(bundled jre). Installbuilder is highly configurable and works in many different contexts (Server, RPM Integration, Auto-Update). The extent to which you can customise the install process requires extensive documentation. I think the section on creating a bundled java runtime(jre) is not as clear as could be needed by many new to installers and Bitrock. I was able to configure a successful installer with a bundled jre by following the steps below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;download the &lt;a href=&#34;//installbuilder.bitrock.com/java/&#34;&gt;Bitrock Installbuilder Java Runtime&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;change the java.xml file so the path correctly  resolves to the Installbuilder Java Runtime&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;include the java.xml file in the Installbuilder components tag and use it to create a java launcher&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;generate a staging directory (with all the needed artifacts)  with gradle, see the custom task&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./gradlew deployStaging&lt;/code&gt; and see  Fig1 for the assembled artifacts form this task&lt;/p&gt;

&lt;p&gt;Fig1
&lt;img src=&#34;/2016/11/staging_directory.png&#34; alt=&#34;Fig1&#34; title=&#34;Fig1&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;

&lt;p&gt;Fig2
&lt;img src=&#34;/2016/11/fig2.png&#34; alt=&#34;Fig2&#34; title=&#34;Fig2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;From Fig 2 you can see the top level artifacts that need to be resolved to the staging directory. &lt;code&gt;jre1.8.0_111-linux-x64.zip&lt;/code&gt; is the jre bundle you need to &lt;a href=&#34;//installbuilder.bitrock.com/java/&#34;&gt;download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the staging directory shown in Fig 1 you can see there are two copies of &lt;code&gt;java.xml&lt;/code&gt; one in the jre bundle and one that is modified and copied to the staging directory by gradle.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;java.xml&lt;/code&gt; in the top level directory contains a diferent path the to jre, than the path  found in the original &lt;code&gt;java.xml&lt;/code&gt; that is packaged in the Bitrock jre bundle.&lt;/p&gt;

&lt;p&gt;The file  &lt;code&gt;demo_linux_install.xml&lt;/code&gt; is the bitrock installation file that configures Installbuilder. You load  &lt;code&gt;demo_linux_install.xml&lt;/code&gt; from the staging directory into Installbuilder and it should resolve the paths and depoly the jre in the distribution.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;//github.com/nsavageJVM/demo-installbuilder/blob/master/demo_linux_install.xml&#34;&gt;line 51&lt;/a&gt; for how the modified &lt;code&gt;java.xml&lt;/code&gt; file is included as a Installbuilder component. See &lt;a href=&#34;//github.com/nsavageJVM/demo-installbuilder/blob/master/java.xml&#34;&gt;line 48&lt;/a&gt; for how this &lt;code&gt;java.xml&lt;/code&gt; was updated so that the paths resolve when the downloded &lt;a href=&#34;//installbuilder.bitrock.com/java/&#34;&gt;Bitrock Installbuilder Java Runtime&lt;/a&gt; is unzipped by gradle and copied to the staging directory with all the other artifacts.&lt;/p&gt;

&lt;p&gt;The rest of the configuration details are self explanatory. Note the code creates a 64 bit linux installer. However the changes required for this to work on Windows or Mac are small. The issue is to get the paths to resolve correctly.&lt;/p&gt;

&lt;p&gt;To install Installbuilder on 64 bit Debian was a challenge as the Installbuilder object files are 32 bit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;sudo apt-get install -y libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5 lib32z1&#39;  
&#39;sudo apt-get  install libgtk2.0-0:i386&#39;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Installbuilder is closed source with a commercial license. However if you are working with a range of clients, platforms, programming language environments and runtimes it can significantly boost productivity.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//installbuilder.bitrock.com/purchase.html#standard&#34;&gt;Installbuilder License&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//github.com/nsavageJVM/demo-installbuilder&#34;&gt;Demo app&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Issues re Reporting tools and Frameworks</title>
      <link>/2016/11/issues-re-reporting-tools-and-frameworks/</link>
      <pubDate>Wed, 23 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/issues-re-reporting-tools-and-frameworks/</guid>
      <description>

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;

&lt;p&gt;Simple code to generate the Jasper Reports Charting Samples&lt;/p&gt;

&lt;h3 id=&#34;target-audience&#34;&gt;Target Audience&lt;/h3&gt;

&lt;p&gt;Developers new to Jasper Reports&lt;/p&gt;

&lt;h3 id=&#34;source-documents&#34;&gt;Source Documents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//community.jaspersoft.com/&#34;&gt;jasper reports&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//community.jaspersoft.com/wiki/jasperreports-server-samples&#34;&gt;jasper reports server samples&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//www.packtpub.com/mapt/book/big-data-and-business-intelligence/9781847198082/1/ch01lvl1sec11/typical-workflow&#34;&gt;jasper reports workflow &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//jasperreports.sourceforge.net/JasperReports-Ultimate-Guide-3.pdf&#34;&gt;jasper reports syntax&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//sourceforge.net/projects/jasperreports/?source=directory&#34;&gt;jasper reports library&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//jasperreports.sourceforge.net/sample.reference/charts/&#34;&gt;jasper reports charts&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//www.informit.com/articles/article.aspx?p=2471547&#34;&gt;ant ivy intergration&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//docs.gradle.org/current/userguide/gradle_wrapper.html&#34;&gt;gradle wrapper&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Refactor the &lt;a href=&#34;//jasperreports.sourceforge.net/sample.reference/charts/&#34;&gt;jasper reports charts&lt;/a&gt; samples from the &lt;a href=&#34;//community.jaspersoft.com/wiki/jasperreports-server-samples&#34;&gt;jasper reports server samples&lt;/a&gt; to run with the gradle wrapper.&lt;/p&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//github.com/nsavageJVM/jasper_dev&#34;&gt;Demo app&lt;/a&gt; run with  &lt;code&gt;./gradlew bootRepackage&lt;/code&gt;  &lt;code&gt;./gradlew bootRun&lt;/code&gt; and the compiled reports can be found in the auto generated &amp;lsquo;chartspdf&amp;rsquo; folder&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;JasperReports is an open source reporting library. It turns up in many Java applications particularly legacy (cms, crm) applications or (cms, crm)  applications that have been developed over a long period of time. Recently I decided to go a bit deeper in my understanding of the &lt;a href=&#34;//jasperreports.sourceforge.net/JasperReports-Ultimate-Guide-3.pdf&#34;&gt;jasper reports syntax&lt;/a&gt; and  &lt;a href=&#34;//www.packtpub.com/mapt/book/big-data-and-business-intelligence/9781847198082/1/ch01lvl1sec11/typical-workflow&#34;&gt;workflow&lt;/a&gt;. Rather than wade thru pages of documentation and xsd schemas I prefer just to run examples and look at the source code to quickly discern the patterns. Particularly I was interested in the &lt;a href=&#34;//jasperreports.sourceforge.net/sample.reference/charts/&#34;&gt;jasper reports charts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I ran into and issue with the &lt;a href=&#34;//sourceforge.net/projects/jasperreports/?source=directory&#34;&gt;jasper reports library&lt;/a&gt;. The code uses ant and ivy out of the box. I spent approx 10 minutes trying to get it to build but kept getting obscure errors complaining about missing ivy dependencies. To speed up the learning experience I quickly refactored the chart examples to run just with the gradle wrapper. If you are new to Jasper reports and you want a simple bootstrap into the charting plugins that jasper uses you can&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;clone the &lt;a href=&#34;//github.com/nsavageJVM/jasper_dev&#34;&gt;Demo app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the gradle wrapper to build and run the code&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./gradlew bootRepackage&lt;/code&gt;  &lt;code&gt;./gradlew bootRun&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;view the reports in the auto generated &amp;lsquo;chartspdf&amp;rsquo; folder&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;

&lt;p&gt;The code sets up and embedded &amp;lsquo;hsqldb&amp;rsquo; database. There is a database init script &lt;a href=&#34;//github.com/nsavageJVM/jasper_dev/blob/master/src/main/resources/schema.sql&#34;&gt;schema&lt;/a&gt;. I had to refactor this from the original &lt;a href=&#34;//github.com/Jaspersoft/jasperreports/blob/master/jasperreports/demo/hsqldb/test.script&#34;&gt;test.script&lt;/a&gt; to get it to work with the hsql in the demo app source. I needed to set the following in the jdbc connection url  &lt;code&gt;sql.enforce_size=false&lt;/code&gt;  &lt;a href=&#34;//github.com/nsavageJVM/jasper_dev/blob/master/src/main/resources/application.properties&#34;&gt;jdbc url&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Jasper xml can call the database directly and run queries, process the ouput and set up the results see &lt;a href=&#34;//github.com/nsavageJVM/jasper_dev/blob/master/src/main/java/jasper/dev/JasperController.java&#34;&gt;JasperController&lt;/a&gt; where you pass the jdbc connection through to the xml.&lt;/p&gt;

&lt;p&gt;The Jasper xml can call java methods see &lt;a href=&#34;//github.com/nsavageJVM/jasper_dev/blob/master/src/main/java/jasper/dev/BarChartCustomizer.java&#34;&gt;BarChartCustomizer&lt;/a&gt;, there is the abstraction they call a &lt;code&gt;Customizer&lt;/code&gt; see &lt;a href=&#34;//jasperreports.sourceforge.net/api/net/sf/jasperreports/engine/JRChartCustomizer.html&#34;&gt;JRChartCustomizer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is a distinction between Business Intelligence (BI) and reporting. Jasper is for reporting. By focusing on reporting and not being a hybrid BI and reporting tool is a good thing. Things quickly get out of hand in terms of complexity and I have seen some horrendously overcoupled BI and reporting code bases. Jasper is released under a user and buisness licensce.&lt;/p&gt;

&lt;p&gt;Going forward to learn about or implement open source BI tools &lt;a href=&#34;//www.pentaho.com/&#34;&gt;pentaho&lt;/a&gt; is a good choice that integrates with Jasper.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//community.jaspersoft.com/wiki/jasperreports-server-and-jaspersoft-olap-license&#34;&gt;Jasper License&lt;/a&gt;.&lt;br /&gt;
&lt;a href=&#34;//www.pentaho.com/license&#34;&gt;pentaho license&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//github.com/nsavageJVM/jasper_dev&#34;&gt;Demo app&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Issues re react-with-zero-configuration</title>
      <link>/2016/11/issues-re-react-with-zero-configuration/</link>
      <pubDate>Mon, 21 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/issues-re-react-with-zero-configuration/</guid>
      <description>

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;

&lt;p&gt;Describe the use of react-with-zero-configuration to deploy to heroku&lt;/p&gt;

&lt;h3 id=&#34;target-audience&#34;&gt;Target Audience&lt;/h3&gt;

&lt;p&gt;Developers new to react&lt;/p&gt;

&lt;h3 id=&#34;source-documents&#34;&gt;Source Documents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html&#34;&gt;react-with-zero-configuration&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//blog.heroku.com/deploying-react-with-zero-configuration&#34;&gt;heroku react-with-zero-configuration &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/mars/create-react-app-buildpack&#34;&gt;heroku react buildpack&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Facebook release build environment for react that abstracts away the lower level dependencies.&lt;/p&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;p&gt;This is a good thing until you run  &lt;code&gt;npm run eject&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;I ran into this when attempting to deploy a react app to Heroku. I was able to get &lt;code&gt;react&lt;/code&gt; to deploy and build on Heroku with the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Remove the dev dependencies section  from &lt;a href=&#34;///github.com/nsavageJVM/eddy-heroku-react/blob/master/package.json&#34;&gt;package.json&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use simple &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt;  scripts,  combining like this failed&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm run build:client &amp;amp;&amp;amp; npm run build:server&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Adding the build pack like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`heroku create -a &amp;lt;appname&amp;gt; -b https://github.com/mars/create-react-app-buildpack.git`
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be clear this approach is not zero configuration, I am specifically declaring the dependencies in the &lt;a href=&#34;///github.com/nsavageJVM/eddy-heroku-react/blob/master/package.json&#34;&gt;package.json&lt;/a&gt;, however it did get the dependencies for heroku in production which previously I was unable to do.&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&#34;//facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html&#34;&gt;repo&lt;/a&gt;  ‘Note: this is a one-way operation. Once you eject, you can’t go back!’&lt;/p&gt;

&lt;p&gt;However it&amp;rsquo;s worth it to  &lt;code&gt;npm run eject&lt;/code&gt;  and have a look at how they set up everything to realise just how far you can go with javascript tooling.&lt;/p&gt;

&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//github.com/nsavageJVM/eddy-heroku-react&#34;&gt;Demo app&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Issues re  Spring Cloud Netflix &lt;span style=&#34;font-size:18px;&#34;&gt; @EnableCircuitBreaker, @EnableHystrix &lt;/span&gt;</title>
      <link>/2016/11/issues-re--spring-cloud-netflix-span-stylefont-size18px-enablecircuitbreaker-enablehystrix-/span/</link>
      <pubDate>Mon, 21 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/issues-re--spring-cloud-netflix-span-stylefont-size18px-enablecircuitbreaker-enablehystrix-/span/</guid>
      <description>

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;

&lt;p&gt;Clarify use of  Spring Cloud Netflix  @EnableCircuitBreaker, @EnableHystrix&lt;/p&gt;

&lt;h3 id=&#34;target-audience&#34;&gt;Target Audience&lt;/h3&gt;

&lt;p&gt;Developers new to Spring Cloud Platform&lt;/p&gt;

&lt;h3 id=&#34;source-documents&#34;&gt;Source Documents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//www.martinfowler.com/articles/microservices.html&#34;&gt;Microservice Architecture&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//projects.spring.io/spring-cloud/&#34;&gt;Spring Cloud&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//cloud.spring.io/spring-cloud-netflix/&#34;&gt;Spring Cloud Netflix &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/Netflix/Hystrix&#34;&gt;Hystrix &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//twitter.github.io/finagle/&#34;&gt;finagle&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/javaslang/javaslang-circuitbreaker&#34;&gt;javaslang-circuitbreaker&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/hystrix/EnableHystrix.java&#34;&gt;@EnableHystrix&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/spring-cloud/spring-cloud-commons/blob/master/spring-cloud-commons/src/main/java/org/springframework/cloud/client/circuitbreaker/EnableCircuitBreaker.java&#34;&gt;@EnableCircuitBreaker&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica&#34;&gt;hystrix-javanica&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Two existing Spring Cloud Netflix annotations to enable the circuit breaker pattern exist. At this time the documentation is not clear as to the distinction in behaviour.&lt;/p&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;p&gt;Use @EnableHystrix to implement the circuit breaker pattern specifically with Hystrix on the classpath.&lt;/p&gt;

&lt;p&gt;Use @EnableCircuitBreaker to implement the circuit breaker pattern with Hystrix or an alternative circuit breaker implementation.&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;It can be confusing to encounter two annotations which at first seem to provide the same behaviour. However with a bit of digging and further analysis we may be able to uncover the rationale(see javadoc for why &lt;a href=&#34;//github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/hystrix/EnableHystrix.java&#34;&gt;@EnableHystrix&lt;/a&gt; and
&lt;a href=&#34;//github.com/spring-cloud/spring-cloud-commons/blob/master/spring-cloud-commons/src/main/java/org/springframework/cloud/client/circuitbreaker/EnableCircuitBreaker.java&#34;&gt;@EnableCircuitBreaker&lt;/a&gt; ) exist.&lt;/p&gt;

&lt;p&gt;Hystrix is an implementation of the Circuit Breaker pattern by Netflix. The @EnableHystrix annotation require a specific implementation, if Hystrix is not on the classpath it will fail.&lt;br /&gt;
@EnableCircuitBreaker is more general and it seems from &lt;a href=&#34;//github.com/spring-cloud/spring-cloud-commons/issues/21&#34;&gt;here&lt;/a&gt; there is an impetus to abstract away the implementation of the CircuitBreaker pattern so that alternative implementations could be used such as &lt;code&gt;finagle&lt;/code&gt; or &lt;code&gt;javaslang-circuitbreaker&lt;/code&gt; (see source docs). The motivation being the dependencies pulled in by Hystrix.&lt;/p&gt;

&lt;p&gt;It seems at this time there is a state of flux and I am unable to find  the documentation for how you would use  @EnableCircuitBreaker to wire in an alternative Circuit Breaker to Hystrix but it seems  architecturally the existence of the @EnableCircuitBreaker allows for the evolution of the Spring Cloud.&lt;/p&gt;

&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;

&lt;p&gt;Spring Cloud Netflix uses a Hyristrix dialect &lt;code&gt;hystrix-javanica&lt;/code&gt;, this allows for the @HystrixCommand annotation to simplify the command pattern code as it applies to Hystrix.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>