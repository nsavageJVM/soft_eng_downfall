<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Software Engineering</title>
    <link>/post/index.xml</link>
    <description>Recent content in Posts on Software Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Except where otherwise noted, content on this site is licensed under a [Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by-sa/4.0/).</copyright>
    <lastBuildDate>Wed, 23 Nov 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Issues re Reporting tools and Frameworks</title>
      <link>/2016/11/issues-re-reporting-tools-and-frameworks/</link>
      <pubDate>Wed, 23 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/issues-re-reporting-tools-and-frameworks/</guid>
      <description>

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;

&lt;p&gt;Simple code to generate the Jasper Reports Samples&lt;/p&gt;

&lt;h3 id=&#34;target-audience&#34;&gt;Target Audience&lt;/h3&gt;

&lt;p&gt;Developers new to Jasper Reports&lt;/p&gt;

&lt;h3 id=&#34;source-documents&#34;&gt;Source Documents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//community.jaspersoft.com/&#34;&gt;jasper reports&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//community.jaspersoft.com/wiki/jasperreports-server-samples&#34;&gt;jasper reports server samples&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//www.packtpub.com/mapt/book/big-data-and-business-intelligence/9781847198082/1/ch01lvl1sec11/typical-workflow&#34;&gt;jasper reports workflow &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//jasperreports.sourceforge.net/JasperReports-Ultimate-Guide-3.pdf&#34;&gt;jasper reports syntax&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//sourceforge.net/projects/jasperreports/?source=directory&#34;&gt;jasper reports library&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//jasperreports.sourceforge.net/sample.reference/charts/&#34;&gt;jasper reports charts&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//www.informit.com/articles/article.aspx?p=2471547&#34;&gt;ant ivy intergration&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//docs.gradle.org/current/userguide/gradle_wrapper.html&#34;&gt;gradle wrapper&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Refactor the &lt;a href=&#34;//jasperreports.sourceforge.net/sample.reference/charts/&#34;&gt;jasper reports charts&lt;/a&gt; samples from the &lt;a href=&#34;//community.jaspersoft.com/wiki/jasperreports-server-samples&#34;&gt;jasper reports server samples&lt;/a&gt; to run just with the gradle wrapper.&lt;/p&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//github.com/nsavageJVM/jasper_dev&#34;&gt;Demo app&lt;/a&gt; run with  &lt;code&gt;./gradlew bootRepackage&lt;/code&gt;  &lt;code&gt;./gradlew bootRun&lt;/code&gt; and the compiled reports can be found in the auto generated &amp;lsquo;chartspdf&amp;rsquo; folder&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;JasperReports is an open source reporting library. It turns up in many Java applications particularly legacy applications or applications that have been developed over a long period of time. Recently I decided to go a bit deeper in my understanding of the &lt;a href=&#34;//jasperreports.sourceforge.net/JasperReports-Ultimate-Guide-3.pdf&#34;&gt;jasper reports syntax&lt;/a&gt; and  &lt;a href=&#34;//www.packtpub.com/mapt/book/big-data-and-business-intelligence/9781847198082/1/ch01lvl1sec11/typical-workflow&#34;&gt;workflow&lt;/a&gt;. Rather than wade thru pages of documentation and xsd schemas I prefer just to run examples and look at the source code to quickly discern the patterns. Particularly I was interested in the &lt;a href=&#34;//jasperreports.sourceforge.net/sample.reference/charts/&#34;&gt;jasper reports charts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I ran into and issue with the &lt;a href=&#34;//sourceforge.net/projects/jasperreports/?source=directory&#34;&gt;jasper reports library&lt;/a&gt;. The code uses ant and ivy out of the box. I spent approx 10 minutes trying to get it to build but kept getting obscure errors complaining about missing ivy dependencies. To speed up the learning experience I quickly refactored the chart examples to run just with the gradle wrapper. If you are new to Jasper reports and you want a simple bootstrap into the charting plugins that jasper uses you can&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;clone the &lt;a href=&#34;//github.com/nsavageJVM/jasper_dev&#34;&gt;Demo app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the gradle wrapper to build and run the code&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./gradlew bootRepackage&lt;/code&gt;  &lt;code&gt;./gradlew bootRun&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;view the reports in the auto generated &amp;lsquo;chartspdf&amp;rsquo; folder&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;

&lt;p&gt;The code sets up and embedded &amp;lsquo;hsqldb&amp;rsquo; database. There is a database init script &lt;a href=&#34;//github.com/nsavageJVM/jasper_dev/blob/master/src/main/resources/schema.sql&#34;&gt;schema&lt;/a&gt;. I had to refactor this from the original &lt;a href=&#34;//github.com/Jaspersoft/jasperreports/blob/master/jasperreports/demo/hsqldb/test.script&#34;&gt;test.script&lt;/a&gt; to get it to work with the hsql in the demo app source.  The Jasper xml can call the database directly and run queries, process the ouput and set up the results see &lt;a href=&#34;//github.com/nsavageJVM/jasper_dev/blob/master/src/main/java/jasper/dev/JasperController.java&#34;&gt;JasperController&lt;/a&gt; where you pass the jdbc connection through to the xml.&lt;/p&gt;

&lt;p&gt;The Jasper xml can call static methods classes see &lt;a href=&#34;//github.com/nsavageJVM/jasper_dev/blob/master/src/main/java/jasper/dev/BarChartCustomizer.java&#34;&gt;BarChartCustomizer&lt;/a&gt;, there is the abstraction they call a &lt;code&gt;Customizer&lt;/code&gt; see &lt;a href=&#34;//jasperreports.sourceforge.net/api/net/sf/jasperreports/engine/JRChartCustomizer.html&#34;&gt;JRChartCustomizer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is a distinction between Business Intelligence (BI) and reporting. Jasper is for reporting. By focusing on reporting and not being a hybrid BI and reporting tool is a good thing. Things quickly get out of hand in terms of complexity and I have seen some horrendously overcoupled BI and reporting code bases. Jasper is released under a user and buisness licensce.&lt;/p&gt;

&lt;p&gt;Going forward to learn about or implement open source BI tools &lt;a href=&#34;//www.pentaho.com/&#34;&gt;pentaho&lt;/a&gt; is a good choice that integrates with Jasper.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//community.jaspersoft.com/wiki/jasperreports-server-and-jaspersoft-olap-license&#34;&gt;Jasper License&lt;/a&gt;.&lt;br /&gt;
&lt;a href=&#34;//www.pentaho.com/license&#34;&gt;pentaho license&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//github.com/nsavageJVM/jasper_dev&#34;&gt;Demo app&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Issues re  Spring Cloud Netflix &lt;span style=&#34;font-size:18px;&#34;&gt; @EnableCircuitBreaker, @EnableHystrix &lt;/span&gt;</title>
      <link>/2016/11/issues-re--spring-cloud-netflix-span-stylefont-size18px-enablecircuitbreaker-enablehystrix-/span/</link>
      <pubDate>Mon, 21 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/issues-re--spring-cloud-netflix-span-stylefont-size18px-enablecircuitbreaker-enablehystrix-/span/</guid>
      <description>

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;

&lt;p&gt;Clarify use of  Spring Cloud Netflix  @EnableCircuitBreaker, @EnableHystrix&lt;/p&gt;

&lt;h3 id=&#34;target-audience&#34;&gt;Target Audience&lt;/h3&gt;

&lt;p&gt;Developers new to Spring Cloud Platform&lt;/p&gt;

&lt;h3 id=&#34;source-documents&#34;&gt;Source Documents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//www.martinfowler.com/articles/microservices.html&#34;&gt;Microservice Architecture&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//projects.spring.io/spring-cloud/&#34;&gt;Spring Cloud&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//cloud.spring.io/spring-cloud-netflix/&#34;&gt;Spring Cloud Netflix &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/Netflix/Hystrix&#34;&gt;Hystrix &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//twitter.github.io/finagle/&#34;&gt;finagle&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/javaslang/javaslang-circuitbreaker&#34;&gt;javaslang-circuitbreaker&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/hystrix/EnableHystrix.java&#34;&gt;@EnableHystrix&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/spring-cloud/spring-cloud-commons/blob/master/spring-cloud-commons/src/main/java/org/springframework/cloud/client/circuitbreaker/EnableCircuitBreaker.java&#34;&gt;@EnableCircuitBreaker&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica&#34;&gt;hystrix-javanica&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Two existing Spring Cloud Netflix annotations to enable the circuit breaker pattern exist. At this time the documentation is not clear as to the distinction in behaviour.&lt;/p&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;p&gt;Use @EnableHystrix to implement the circuit breaker pattern specifically with Hystrix on the classpath.&lt;/p&gt;

&lt;p&gt;Use @EnableCircuitBreaker to implement the circuit breaker pattern with Hystrix or an alternative circuit breaker implementation.&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;It can be confusing to encounter two annotations which at first seem to provide the same behaviour. However with a bit of digging and further analysis we may be able to uncover the rationale(see javadoc for why &lt;a href=&#34;//github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/hystrix/EnableHystrix.java&#34;&gt;@EnableHystrix&lt;/a&gt; and
&lt;a href=&#34;//github.com/spring-cloud/spring-cloud-commons/blob/master/spring-cloud-commons/src/main/java/org/springframework/cloud/client/circuitbreaker/EnableCircuitBreaker.java&#34;&gt;@EnableCircuitBreaker&lt;/a&gt; ) exist.&lt;/p&gt;

&lt;p&gt;Hystrix is an implementation of the Circuit Breaker pattern by Netflix. The @EnableHystrix annotation require a specific implementation, if Hystrix is not on the classpath it will fail.&lt;br /&gt;
@EnableCircuitBreaker is more general and it seems from &lt;a href=&#34;//github.com/spring-cloud/spring-cloud-commons/issues/21&#34;&gt;here&lt;/a&gt; there is an impetus to abstract away the implementation of the CircuitBreaker pattern so that alternative implementations could be used such as &lt;code&gt;finagle&lt;/code&gt; or &lt;code&gt;javaslang-circuitbreaker&lt;/code&gt; (see source docs). The motivation being the dependencies pulled in by Hystrix.&lt;/p&gt;

&lt;p&gt;It seems at this time there is a state of flux and I am unable to find  the documentation for how you would use  @EnableCircuitBreaker to wire in an alternative Circuit Breaker to Hystrix but it seems  architecturally the existence of the @EnableCircuitBreaker allows for the evolution of the Spring Cloud.&lt;/p&gt;

&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;

&lt;p&gt;Spring Cloud Netflix uses a Hyristrix dialect &lt;code&gt;hystrix-javanica&lt;/code&gt;, this allows for the @HystrixCommand annotation to simplify the command pattern code as it applies to Hystrix.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Issues re react-with-zero-configuration</title>
      <link>/2016/11/issues-re-react-with-zero-configuration/</link>
      <pubDate>Mon, 21 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/issues-re-react-with-zero-configuration/</guid>
      <description>

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;

&lt;p&gt;Describe the use of react-with-zero-configuration to deploy to heroku&lt;/p&gt;

&lt;h3 id=&#34;target-audience&#34;&gt;Target Audience&lt;/h3&gt;

&lt;p&gt;Developers new to react&lt;/p&gt;

&lt;h3 id=&#34;source-documents&#34;&gt;Source Documents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html&#34;&gt;react-with-zero-configuration&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//blog.heroku.com/deploying-react-with-zero-configuration&#34;&gt;heroku react-with-zero-configuration &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/mars/create-react-app-buildpack&#34;&gt;heroku react buildpack&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Facebook release build environment for react that abstracts away the lower level dependencies.&lt;/p&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;p&gt;This is a good thing until you run  &lt;code&gt;npm run eject&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;I ran into this when attempting to deploy a react app to Heroku. I was able to get &lt;code&gt;react&lt;/code&gt; to deploy and build on Heroku with the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Remove the dev dependencies section  from &lt;a href=&#34;///github.com/nsavageJVM/eddy-heroku-react/blob/master/package.json&#34;&gt;package.json&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use simple &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt;  scripts,  combining like this failed&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm run build:client &amp;amp;&amp;amp; npm run build:server&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Adding the build pack like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`heroku create -a &amp;lt;appname&amp;gt; -b https://github.com/mars/create-react-app-buildpack.git`
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be clear this approach is not zero configuration, I am specifically declaring the dependencies in the &lt;a href=&#34;///github.com/nsavageJVM/eddy-heroku-react/blob/master/package.json&#34;&gt;package.json&lt;/a&gt;, however it did get the dependencies for heroku in production which previously I was unable to do.&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&#34;//facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html&#34;&gt;repo&lt;/a&gt;  ‘Note: this is a one-way operation. Once you eject, you can’t go back!’&lt;/p&gt;

&lt;p&gt;However it&amp;rsquo;s worth it to  &lt;code&gt;npm run eject&lt;/code&gt;  and have a look at how they set up everything to realise just how far you can go with javascript tooling.&lt;/p&gt;

&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//github.com/nsavageJVM/eddy-heroku-react&#34;&gt;Demo app&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>