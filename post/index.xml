<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Software Engineering</title>
    <link>/post/index.xml</link>
    <description>Recent content in Posts on Software Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Except where otherwise noted, content on this site is licensed under a [Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by-sa/4.0/).</copyright>
    <lastBuildDate>Mon, 21 Nov 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Issues re  Spring Cloud Netflix &lt;span style=&#34;font-size:18px;&#34;&gt; @EnableCircuitBreaker, @EnableHystrix &lt;/span&gt;</title>
      <link>/2016/11/issues-re--spring-cloud-netflix-span-stylefont-size18px-enablecircuitbreaker-enablehystrix-/span/</link>
      <pubDate>Mon, 21 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/issues-re--spring-cloud-netflix-span-stylefont-size18px-enablecircuitbreaker-enablehystrix-/span/</guid>
      <description>

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;

&lt;p&gt;Clarify use of  Spring Cloud Netflix  @EnableCircuitBreaker, @EnableHystrix&lt;/p&gt;

&lt;h3 id=&#34;target-audience&#34;&gt;Target Audience&lt;/h3&gt;

&lt;p&gt;Developers new to Spring Cloud Platform&lt;/p&gt;

&lt;h3 id=&#34;source-documents&#34;&gt;Source Documents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//www.martinfowler.com/articles/microservices.html&#34;&gt;Microservice Architecture&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//projects.spring.io/spring-cloud/&#34;&gt;Spring Cloud&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//cloud.spring.io/spring-cloud-netflix/&#34;&gt;Spring Cloud Netflix &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/Netflix/Hystrix&#34;&gt;Hystrix &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://twitter.github.io/finagle/&#34;&gt;finagle&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/javaslang/javaslang-circuitbreaker&#34;&gt;javaslang-circuitbreaker&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/hystrix/EnableHystrix.java&#34;&gt;@EnableHystrix&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/spring-cloud/spring-cloud-commons/blob/master/spring-cloud-commons/src/main/java/org/springframework/cloud/client/circuitbreaker/EnableCircuitBreaker.java&#34;&gt;@EnableCircuitBreaker&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica&#34;&gt;hystrix-javanica&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Two existing Spring Cloud Netflix annotations to enable the circuit breaker pattern exist. At this time the documentation is not clear as to the distinction in behaviour.&lt;/p&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;p&gt;Use @EnableHystrix to implement the circuit breaker pattern specifically with Hystrix on the classpath.&lt;/p&gt;

&lt;p&gt;Use @EnableCircuitBreaker to implement the circuit breaker pattern with Hystrix or an alternative circuit breaker implementation.&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;It can be confusing to encounter two annotations which at first seem to provide the same behaviour. However with a bit of digging and further analysis we may be able to uncover the rationale(see javadoc for why &lt;a href=&#34;//github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/hystrix/EnableHystrix.java&#34;&gt;@EnableHystrix&lt;/a&gt; and
&lt;a href=&#34;//github.com/spring-cloud/spring-cloud-commons/blob/master/spring-cloud-commons/src/main/java/org/springframework/cloud/client/circuitbreaker/EnableCircuitBreaker.java&#34;&gt;@EnableCircuitBreaker&lt;/a&gt; ) exist.&lt;/p&gt;

&lt;p&gt;Hystrix is an implementation of the Circuit Breaker pattern by Netflix. The @EnableHystrix annotation require a specific implementation, if Hystrix is not on the classpath it will fail.&lt;br /&gt;
@EnableCircuitBreaker is more general and it seems from &lt;a href=&#34;//github.com/spring-cloud/spring-cloud-commons/issues/21&#34;&gt;here&lt;/a&gt; there is an impetus to abstract away the implementation of the CircuitBreaker pattern so that alternative implementations could be used such as &lt;code&gt;finagle&lt;/code&gt; or &lt;code&gt;javaslang-circuitbreaker&lt;/code&gt; (see source docs). The motivation being the dependencies pulled in by Hystrix.&lt;/p&gt;

&lt;p&gt;It seems at this time there is a state of flux and I am unable to find  the documentation for how you would use  @EnableCircuitBreaker to wire in an alternative Circuit Breaker to Hystrix but it seems  architecturally the existence of the @EnableCircuitBreaker allows for the evolution of the Spring Cloud.&lt;/p&gt;

&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;

&lt;p&gt;Spring Cloud Netflix uses a Hyristrix dialect &lt;code&gt;hystrix-javanica&lt;/code&gt;, this allows for the @HystrixCommand annotation to simplify the command pattern code as it applies to Hystrix.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Issues re react-with-zero-configuration</title>
      <link>/2016/11/issues-re-react-with-zero-configuration/</link>
      <pubDate>Mon, 21 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/11/issues-re-react-with-zero-configuration/</guid>
      <description>

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;

&lt;p&gt;Describe the use of react-with-zero-configuration to deploy to heroku&lt;/p&gt;

&lt;h3 id=&#34;target-audience&#34;&gt;Target Audience&lt;/h3&gt;

&lt;p&gt;Developers new to react&lt;/p&gt;

&lt;h3 id=&#34;source-documents&#34;&gt;Source Documents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html&#34;&gt;react-with-zero-configuration&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//blog.heroku.com/deploying-react-with-zero-configuration&#34;&gt;heroku react-with-zero-configuration &lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/mars/create-react-app-buildpack&#34;&gt;heroku react buildpack&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Facebook release build environment for react that abstracts away the lower level dependencies.&lt;/p&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;p&gt;This is a good thing until you &lt;code&gt;npm run eject&lt;/code&gt; then you need a good psychiatrist&lt;/p&gt;

&lt;p&gt;Trinity:  &amp;ldquo;You always told me to stay off the freeway.&amp;rdquo;&lt;br /&gt;
Morpheus: &amp;ldquo;Yes, that&amp;rsquo;s true.&amp;rdquo;&lt;br /&gt;
Trinity: &amp;ldquo;You said it was suicide.&amp;rdquo;&lt;br /&gt;
Morpheus: &amp;ldquo;Then let us hope I was wrong.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;I ran into this when attempting to deploy a react app to Heroku. I was able to get &lt;code&gt;react&lt;/code&gt; to deploy and build on Heroku with the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Remove the dev dependencies section  from &lt;a href=&#34;///github.com/nsavageJVM/eddy-heroku-react/blob/master/package.json&#34;&gt;package.json&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use simple &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt;  scripts,  combining like this failed&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm run build:client &amp;amp;&amp;amp; npm run build:server&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Adding the build pack like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`heroku create -a &amp;lt;appname&amp;gt; -b https://github.com/mars/create-react-app-buildpack.git`
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be clear this approach is not zero configuration, I am specifically declaring the dependencies in the &lt;a href=&#34;///github.com/nsavageJVM/eddy-heroku-react/blob/master/package.json&#34;&gt;package.json&lt;/a&gt;, however it did get the dependencies for heroku in production which previously I was unable to do.&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&#34;//facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html&#34;&gt;repo&lt;/a&gt;  ‘Note: this is a one-way operation. Once you eject, you can’t go back!’&lt;/p&gt;

&lt;p&gt;However it&amp;rsquo;s worth it to  &lt;code&gt;npm run eject&lt;/code&gt;  and have a look at how they set up everything to realise just how far you can go with javascript tooling.&lt;/p&gt;

&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//github.com/nsavageJVM/eddy-heroku-react&#34;&gt;Demo app&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>