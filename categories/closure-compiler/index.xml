<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Closure Compiler on Software Engineering</title>
    <link>/categories/closure-compiler/index.xml</link>
    <description>Recent content in Closure Compiler on Software Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Except where otherwise noted, content on this site is licensed under a [Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by-sa/4.0/).</copyright>
    <atom:link href="/categories/closure-compiler/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The javascript transpile dialectic part 2</title>
      <link>/2016/12/the-javascript-transpile-dialectic-part-2/</link>
      <pubDate>Mon, 05 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/12/the-javascript-transpile-dialectic-part-2/</guid>
      <description>

&lt;h3 id=&#34;objective&#34;&gt;Objective&lt;/h3&gt;

&lt;p&gt;Simple demo code for transpiling to Javascript. Review the setup and configuration for different transpiler engines.&lt;/p&gt;

&lt;h3 id=&#34;target-audience&#34;&gt;Target Audience&lt;/h3&gt;

&lt;p&gt;Developers new to modern javascript frameworks and tooling&lt;/p&gt;

&lt;h3 id=&#34;source-documents&#34;&gt;Source Documents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;//developers.google.com/closure/compiler/&#34;&gt;Closure Compiler&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//github.com/google/closure-library&#34;&gt;google-closure-library&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;//www.closurecheatsheet.com/skeleton&#34;&gt;closurecheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;The Closure Compiler transpiler takes ECMAScript 2015 to optimized, minified ES3. The google-closure-library is notable because it is used to
build Gmail and other top level google applications like Google Docs. The compiler is a Java application based on &lt;a href=&#34;//developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino&#34;&gt;Rhino&lt;/a&gt;
from Mozilla with an associated set of python tools sometimes refered to as closure build tools. The closure compiler was one of the first transpilers for
ECMAScript  and is constantly evolving, for exampe. the  use of the python tools is now depreciated and the documentation appears to lag the actual state/capabilities
of the latest version. To complicate the terminology there is now a pure javascript closure compiler with interfaces for webpack and gulp. However I encountered
difficulties with the javascript compiler and the closure widgets.
The compiler allows for compression, mangling and optimisation( dead code removal, function flattening and inlining).There is an Advanced mode which is
aggressive (dead code removal allows for removing unused code across modules) and will often will break your application unles you implement the following,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;By configuring &lt;a href=&#34;//github.com/google/closure-compiler/wiki/Externs-For-Common-Libraries&#34;&gt;externs&lt;/a&gt; you can use the compiler with other frameworks like
JQuery. Anything declared as an Extern is excluded from the optimisation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There is an annotation system to exclude properties from optimisation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;p&gt;See the Demo app for &lt;a href=&#34;//github.com/nsavageJVM/transpilers-dev/tree/master/closure&#34;&gt;closure&lt;/a&gt;&lt;br /&gt;
The demo code has a number of configuration options see see top level &lt;a href=&#34;https://github.com/nsavageJVM/transpilers-dev&#34;&gt;readme&lt;/a&gt; for general instructions.
In particular installing a local jre on windows to run the compiler if no jre is installed in the system.&lt;/p&gt;

&lt;h4 id=&#34;transpile&#34;&gt;Transpile&lt;/h4&gt;

&lt;p&gt;Use the following one line  command to run the compiler&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java -jar compiler.jar --compilation_level=ADVANCED --closure_entry_point=dev.app  --only_closure_dependencies  --js=./node_modules/google-closure-library --js src/main.js --js src/component.js --js_output_file  dist/app.min.js&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;test&#34;&gt;Test&lt;/h4&gt;

&lt;p&gt;open Test.html&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;The Closure compiler knows about the semantics of JS and generates low-level wrappers and checks for the transpiled code. It implements the javascript semantics to achieve type safety.
Consider the class &lt;a href=&#34;//github.com/nsavageJVM/transpilers-dev/blob/master/closure/src/component.js&#34;&gt;component&lt;/a&gt;, and its constructor at line 15 and type inheritance at line 26.&lt;/p&gt;

&lt;p&gt;The compiler also acts as a build tool assembling the application&amp;rsquo;s dependencies into a bundle. Consider the fragment from the compiler flag values&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--js=./node_modules/google-closure-library --js src/main.js --js src/component.js&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;--js=./node_modules/google-closure-library&lt;/code&gt;  imports the dependencies for &lt;code&gt;main.js&lt;/code&gt; and &lt;code&gt;component.js&lt;/code&gt;   from the closure library&lt;/li&gt;
&lt;li&gt;here &lt;code&gt;component.js&lt;/code&gt; is a dependency of &lt;code&gt;main.js&lt;/code&gt;  see &lt;a href=&#34;https://github.com/nsavageJVM/transpilers-dev/blob/master/closure/src/main.js&#34;&gt;main&lt;/a&gt; line 46&lt;/li&gt;
&lt;li&gt;the output file &lt;code&gt;app.min.js&lt;/code&gt;  contains the application&amp;rsquo;s entry point and all needed dependencies from the library as well as custom components.&lt;/li&gt;
&lt;li&gt;the output file &lt;code&gt;app.min.js&lt;/code&gt; is the single import required for the html&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;previously to assemble the dependencies you would use the python script &lt;code&gt;depswriter.py&lt;/code&gt; but this is no longer required something not hilighted in the documentation&lt;/p&gt;

&lt;h3 id=&#34;more-details&#34;&gt;More Details&lt;/h3&gt;

&lt;p&gt;To clarify the relationships in the above code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The python scripts are no longer required&lt;/li&gt;
&lt;li&gt;The compiler can perform aggressive optimisations with externs and annotations for preserving type names when required&lt;/li&gt;
&lt;li&gt;the compiler assembles a bundle with all included dependencies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;//github.com/nsavageJVM/transpilers-dev/tree/master/closure&#34;&gt;Demo app for closure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;////github.com/nsavageJVM/transpilers-dev&#34;&gt;Demo app for all series parts&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>